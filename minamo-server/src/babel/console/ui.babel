'use strict';

(function(){

// Import ReactBootstrap objects
const Table = ReactBootstrap.Table
    , Label = ReactBootstrap.Label
    , Tooltip = ReactBootstrap.Tooltip
    , OverlayTrigger = ReactBootstrap.OverlayTrigger
    , FormControl = ReactBootstrap.FormControl
    , InputGroup = ReactBootstrap.InputGroup
    , Button = ReactBootstrap.Button
    , DropdownButton = ReactBootstrap.DropdownButton
    , MenuItem = ReactBootstrap.MenuItem
    , PanelGroup = ReactBootstrap.PanelGroup
    , Panel = ReactBootstrap.Panel
    , Collapse = ReactBootstrap.Collapse
    , Row = ReactBootstrap.Row
    , Col = ReactBootstrap.Col
    , Modal = ReactBootstrap.Modal
    , Glyphicon = ReactBootstrap.Glyphicon;

const ServiceLink = React.createClass({
  render: function(){
    let uri = `${MinamoConfig.proto}//${this.props.service}.${MinamoConfig.domain}`;
    let label = `${this.props.service}${this.props.short ? '' : `.${MinamoConfig.domain}`}`;
    return (<a href={uri}>{label}</a>); 
  }
});

const ServiceStatus = React.createClass({
  render: function(){
    let style = this.props.status.toLabelColor();
    return (<Label bsStyle={style}>{this.props.status.toString()}</Label>);
  }
});

const ServiceHead = React.createClass({
  render: function(){
    return this.props.external
      ? (<span className="text-muted">external</span>)
      : (<span>{this.props.head}</span>);
  }
});

const ServiceUptime = React.createClass({
  render: function(){
    let tooltip = (<Tooltip id={this.props.created}>{this.props.created}</Tooltip>);
    return (
      <OverlayTrigger overlay={tooltip} placement="top">
        <span>{this.props.uptime}</span>
      </OverlayTrigger>
    );
  }
});

const ServiceRepoUri = React.createClass({
  focus: function(e){
    e.target.select();
  },
  render: function(){
    this.repo = `${MinamoConfig.proto}//git.${MinamoConfig.domain}/${this.props.name}.git`;
    if(this.props.authkey){
      this.repo = `${MinamoConfig.proto}//${MinamoConfig.domain}/api/hooks/${this.props.name}?key=${this.props.authkey}`;
      return (
        <InputGroup>
          <InputGroup.Addon><Glyphicon glyph="refresh" /></InputGroup.Addon>
          <FormControl readOnly value={this.repo} type="text" onFocus={this.focus} />
        </InputGroup>
      );
    }
    return (
      <FormControl readOnly value={this.repo} type="text" onFocus={this.focus} />
    );
  }
});

const ServiceEnvConfig = React.createClass({
  getInitialState: function(){
    return { show: true }
  },
  close: function() {
    this.setState({ show: false });
  },
  render: function(){
    return (
      <Modal show={this.state.show} onHide={this.close}>
        <Modal.Footer>
          <Button bsStyle="primary" onClick={this.close}>Save</Button>
          <Button onClick={this.close}>Cancel</Button>
        </Modal.Footer>
      </Modal>
    );
  }
});

const ServiceAction = React.createClass({
  onSelect: function(key, e){
    this._handler[key]();
  },
  render: function(){
    this._handler = new ServiceActionHandler(this.props.name);
    let commands = ['logs', '---'];
    if(this.props.status.isRunning()){
      commands.push('stop', 'restart', '---');
    }else if(this.props.status.isStopped()){
      commands.push('start', '---');
    }
    commands.push('config');
    let items = commands.map((item,i) => item === '---'
      ? (<MenuItem divider key={`---${i}`}/>)
      : (<MenuItem eventKey={item} key={item}>{item}</MenuItem>));
    return (<DropdownButton id={this.props.name} title="Action" onSelect={this.onSelect}>{items}</DropdownButton>);
  }
});

const ServiceRemoveButton = React.createClass({
  onClick: function(e) { (new ServiceActionHandler(this.props.name)).remove(); },
  render: function(){
    return(<Button bsStyle="danger" onClick={this.onClick}>remove</Button>);
  }
});

const ContainersTableHeader = React.createClass({
  render: function(){
    let names = ['name', 'status', 'head', 'uptime', 'repo', 'action', 'remove'];
    let headers = names.map(n => (<th key={`tr_${n}`}>{n}</th>));
    return (<tr>{headers}</tr>);
  }
});

const ContainersTableRow = React.createClass({
  render: function(){
    let data = this.props.data;
    let status = new ContainerStatus(data.status);
    return (
      <tr className="container_row">
        <td><ServiceLink service={this.props.name} short /></td>
        <td><ServiceStatus status={status} /></td>
        <td><ServiceHead head={data.head} external={data.repo==='external'} /></td>
        <td><ServiceUptime created={new Date(data.created).toLocaleString()} uptime={data.uptime} /></td>
        <td><ServiceRepoUri name={this.props.name} authkey={data.key} /></td>
        <td><ServiceAction name={this.props.name} status={status}/></td>
        <td><ServiceRemoveButton name={this.props.name} /></td>
      </tr>
    );
  }
});

const ContainerListLarge = React.createClass({
  render: function(){
    let data = this.props.data;
    let rows = Object.keys(data).map(container =>
      (<ContainersTableRow name={container} data={data[container]} key={container} />));
    return (
      <Table hover>
        <thead>
          <ContainersTableHeader />
        </thead>
        <tbody>
          {rows}
        </tbody>
      </Table>
    );
  }
});

const ContainerPane = React.createClass({
  render: function(){
    let data = this.props.data;
    let status = new ContainerStatus(data.status);
    let header = (
      <Row>
        <Col xs={6}>
          <h4 className="visible-xs-inline">{this.props.name}</h4>
        </Col>
        <Col xs={6} className="text-right">
          <ServiceStatus status={status} />
        </Col>
      </Row>
    );
    return (
      <PanelGroup>
        <Panel header={header} collapsible>
          <dl className="dl-horizontal">
            <dt>service</dt>
            <dd><ServiceLink service={this.props.name} /></dd>
            <dt>head</dt>
            <dd><ServiceHead head={data.head} external={data.repo==='external'} /></dd>
            <dt>uptime</dt>
            <dd><ServiceUptime created={new Date(data.created).toLocaleString()} uptime={data.uptime} /></dd>
            <dt>repo</dt>
            <dd><ServiceRepoUri name={this.props.name} authkey={data.key} /></dd>
          </dl>
          <ServiceAction name={this.props.name} status={status} />
          <span> </span>
          <ServiceRemoveButton name={this.props.name} />
        </Panel>
      </PanelGroup>
    );
  }
});

const ContainerListSmall = React.createClass({
  render: function(){
    let data = this.props.data;
    let rows = Object.keys(data).map(container =>
      (<ContainerPane name={container} data={data[container]} key={`${container}_xs`} />));
    return (<div>{rows}</div>);
  }
});

const ContainerGroup = React.createClass({
  updateState: function(state){
    this.cookie = state.cookie;
    this.setState({data: state.statuses});
  },
  getInitialState: () => ({data: {}}),
  componentDidMount: function(){
    const requestFetch = initializeSocket(state => this.updateState(state));
  },
  render: function(){
    return (
      <div>
        <div className="hidden-xs">
          <ContainerListLarge data={this.state.data}/>
        </div>
        <div className="visible-xs">
          <ContainerListSmall data={this.state.data}/>
        </div>
      </div>
    );
  }
});

ReactDOM.render(
  <ContainerGroup pollInterval={5000}/>,
  document.getElementById('statuses')
);

})();
