# set path to your redis.lua
lua_package_path "/usr/share/lua/5.1/nginx/?.lua;;";

# root domain
server {
	listen 80;
	listen [::]:80;
#	listen 443 ssl http2;
#	listen [::]:443 ssl http2;
#	ssl_certificate /path/to/server.crt;
#	ssl_certificate_key /path/to/server.key;
#	ssl_prefer_server_ciphers on;
#	ssl_ciphers AESGCM:HIGH:!aNULL:!MD5;
	# set your root domain
	server_name minamo.io; 
	location / {
		proxy_pass http://127.0.0.1:3000/;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}
}

# git host
server {
	listen 80;
	listen [::]:80;
#	listen 443 ssl http2;
#	listen [::]:443 ssl http2;
#	ssl_certificate /path/to/server.crt;
#	ssl_certificate_key /path/to/server.key;
#	ssl_prefer_server_ciphers on;
#	ssl_ciphers AESGCM:HIGH:!aNULL:!MD5;

	client_max_body_size 500m;
	# set your git domain
	server_name git.minamo.io;
	location / {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass http://127.0.0.1:7000/;
	}
}

# service mapper
server {
	listen 80 default;
	listen [::]:80 default;
#	listen 443 ssl default http2;
#	listen [::]:443 ssl default http2;
#	ssl_certificate /path/to/server.crt;
#	ssl_certificate_key /path/to/server.key;
#	ssl_prefer_server_ciphers on;
#	ssl_ciphers AESGCM:HIGH:!aNULL:!MD5;
	location / {
		set $upstream "";
		rewrite_by_lua '
			-- try cached route first
			local redis  = require "redis"
			local red = redis:new()
			local client = red:connect("127.0.0.1", 6379)
			local route  = red:get(ngx.var.http_host)

			-- fallback to redis for lookups
			if type(route) == "string" then
				ngx.var.upstream = route
			else
				ngx.exit(ngx.HTTP_NOT_FOUND)
			end
		';
		proxy_buffering             off;
		proxy_http_version	    1.1;
		proxy_set_header            Host $host;
		proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header	    Upgrade $http_upgrade;
		proxy_set_header	    Connection "upgrade";
		proxy_redirect              off;
		proxy_connect_timeout       10;
		proxy_send_timeout          30;
		proxy_read_timeout          30;
		proxy_pass                  $upstream;
	}
}
